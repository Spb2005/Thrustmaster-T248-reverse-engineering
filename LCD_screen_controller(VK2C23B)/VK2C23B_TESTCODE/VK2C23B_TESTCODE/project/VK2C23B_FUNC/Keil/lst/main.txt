; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M451Series\Include -I..\..\..\Library\StdDriver\inc -I..\Bsp -I..\User -I..\lcd_driver -I..\exti_driver -I..\led_driver -I..\touch -I..\dotmatix_lcd -I..\KH -ID:\工作\A工程资料\LCD\抗干扰系列_VK2C\VK2C例程\VK2C23B_TESTCODE\project\VK2C23B_FUNC\Keil\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.3.0\CMSIS\Include -D__UVISION_VERSION=515 -D_RTE_ --omf_browse=.\obj\main.crf ..\User\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  I2C0_IRQHandler PROC
;;;43     /*---------------------------------------------------------------------------------------------------------*/
;;;44     void I2C0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;45     {
;;;46         unsigned int status;
;;;47     
;;;48         status = I2C_GET_STATUS(I2C0);
000002  48cd              LDR      r0,|L1.824|
000004  68c4              LDR      r4,[r0,#0xc]
;;;49         if(I2C_GET_TIMEOUT_FLAG(I2C0))
000006  6940              LDR      r0,[r0,#0x14]
000008  f0000001          AND      r0,r0,#1
00000c  b118              CBZ      r0,|L1.22|
;;;50         {
;;;51             /* Clear I2C0 Timeout Flag */
;;;52             I2C_ClearTimeoutFlag(I2C0);
00000e  48ca              LDR      r0,|L1.824|
000010  f7fffffe          BL       I2C_ClearTimeoutFlag
000014  e006              B        |L1.36|
                  |L1.22|
;;;53         }
;;;54         else
;;;55         {
;;;56             if(i2c0handlerflag != NULL)
000016  48c9              LDR      r0,|L1.828|
000018  6800              LDR      r0,[r0,#0]  ; i2c0handlerflag
00001a  b118              CBZ      r0,|L1.36|
;;;57                 i2c0handlerflag(status);
00001c  4620              MOV      r0,r4
00001e  49c7              LDR      r1,|L1.828|
000020  6809              LDR      r1,[r1,#0]  ; i2c0handlerflag
000022  4788              BLX      r1
                  |L1.36|
;;;58         }
;;;59     }
000024  bd10              POP      {r4,pc}
;;;60     
                          ENDP

                  I2C_MasterRx PROC
;;;63     /*---------------------------------------------------------------------------------------------------------*/
;;;64     void I2C_MasterRx(unsigned int rxstatus)
000026  b510              PUSH     {r4,lr}
;;;65     {
000028  4604              MOV      r4,r0
;;;66         if(rxstatus == 0x08)                       /* START has been transmitted and prepare SLA+W */
00002a  2c08              CMP      r4,#8
00002c  d10a              BNE      |L1.68|
;;;67         {
;;;68             I2C_SET_DATA(I2C0, (VK2C23B_ADDR << 1));    /* Write SLA+W to Register I2CDAT */
00002e  207c              MOVS     r0,#0x7c
000030  49c1              LDR      r1,|L1.824|
000032  6088              STR      r0,[r1,#8]
;;;69             I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI);
000034  4608              MOV      r0,r1
000036  6800              LDR      r0,[r0,#0]
000038  f020003c          BIC      r0,r0,#0x3c
00003c  f0400008          ORR      r0,r0,#8
000040  6008              STR      r0,[r1,#0]
000042  e055              B        |L1.240|
                  |L1.68|
;;;70         }
;;;71         else if(rxstatus == 0x18)                  /* SLA+W has been transmitted and ACK has been received */
000044  2c18              CMP      r4,#0x18
000046  d111              BNE      |L1.108|
;;;72         {
;;;73             I2C_SET_DATA(I2C0, i2crdtx[txcnt++]);
000048  48bd              LDR      r0,|L1.832|
00004a  7801              LDRB     r1,[r0,#0]  ; txcnt
00004c  7800              LDRB     r0,[r0,#0]  ; txcnt
00004e  1c40              ADDS     r0,r0,#1
000050  4abb              LDR      r2,|L1.832|
000052  7010              STRB     r0,[r2,#0]
000054  48bb              LDR      r0,|L1.836|
000056  5c40              LDRB     r0,[r0,r1]
000058  49b7              LDR      r1,|L1.824|
00005a  6088              STR      r0,[r1,#8]
;;;74             I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI);
00005c  4608              MOV      r0,r1
00005e  6800              LDR      r0,[r0,#0]
000060  f020003c          BIC      r0,r0,#0x3c
000064  f0400008          ORR      r0,r0,#8
000068  6008              STR      r0,[r1,#0]
00006a  e041              B        |L1.240|
                  |L1.108|
;;;75         }
;;;76         else if(rxstatus == 0x20)                  /* SLA+W has been transmitted and NACK has been received */
00006c  2c20              CMP      r4,#0x20
00006e  d10b              BNE      |L1.136|
;;;77         {
;;;78             I2C_STOP(I2C0);
000070  48b1              LDR      r0,|L1.824|
000072  f7fffffe          BL       I2C_STOP
;;;79             I2C_START(I2C0);
000076  48b0              LDR      r0,|L1.824|
000078  6800              LDR      r0,[r0,#0]
00007a  f0200008          BIC      r0,r0,#8
00007e  f0400020          ORR      r0,r0,#0x20
000082  49ad              LDR      r1,|L1.824|
000084  6008              STR      r0,[r1,#0]
000086  e033              B        |L1.240|
                  |L1.136|
;;;80         }
;;;81         else if(rxstatus == 0x28)                  /* DATA has been transmitted and ACK has been received */
000088  2c28              CMP      r4,#0x28
00008a  d108              BNE      |L1.158|
;;;82         {
;;;83     			I2C_SET_CONTROL_REG(I2C0, I2C_CTL_STA_SI);  //数据・发送完SR START
00008c  48aa              LDR      r0,|L1.824|
00008e  6800              LDR      r0,[r0,#0]
000090  f020003c          BIC      r0,r0,#0x3c
000094  f0400028          ORR      r0,r0,#0x28
000098  49a7              LDR      r1,|L1.824|
00009a  6008              STR      r0,[r1,#0]
00009c  e028              B        |L1.240|
                  |L1.158|
;;;84         }
;;;85         else if(rxstatus == 0x10)                  /* Repeat START has been transmitted and prepare SLA+R */
00009e  2c10              CMP      r4,#0x10
0000a0  d10a              BNE      |L1.184|
;;;86         {
;;;87             I2C_SET_DATA(I2C0, ((VK2C23B_ADDR << 1) | 0x01));   /* Write SLA+R to Register I2CDAT */
0000a2  207d              MOVS     r0,#0x7d
0000a4  49a4              LDR      r1,|L1.824|
0000a6  6088              STR      r0,[r1,#8]
;;;88             I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI);
0000a8  4608              MOV      r0,r1
0000aa  6800              LDR      r0,[r0,#0]
0000ac  f020003c          BIC      r0,r0,#0x3c
0000b0  f0400008          ORR      r0,r0,#8
0000b4  6008              STR      r0,[r1,#0]
0000b6  e01b              B        |L1.240|
                  |L1.184|
;;;89         }
;;;90         else if(rxstatus == 0x40)                  /* SLA+R has been transmitted and ACK has been received */
0000b8  2c40              CMP      r4,#0x40
0000ba  d108              BNE      |L1.206|
;;;91         {
;;;92             I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI);
0000bc  489e              LDR      r0,|L1.824|
0000be  6800              LDR      r0,[r0,#0]
0000c0  f020003c          BIC      r0,r0,#0x3c
0000c4  f0400008          ORR      r0,r0,#8
0000c8  499b              LDR      r1,|L1.824|
0000ca  6008              STR      r0,[r1,#0]
0000cc  e010              B        |L1.240|
                  |L1.206|
;;;93         }
;;;94         else if(rxstatus == 0x58)                  /* DATA has been received and NACK has been returned */
0000ce  2c58              CMP      r4,#0x58
0000d0  d10e              BNE      |L1.240|
;;;95         {
;;;96     			i2crdrx = (unsigned char) I2C_GET_DATA(I2C0);
0000d2  4899              LDR      r0,|L1.824|
0000d4  6880              LDR      r0,[r0,#8]
0000d6  499c              LDR      r1,|L1.840|
0000d8  7008              STRB     r0,[r1,#0]
;;;97     			I2C_SET_CONTROL_REG(I2C0, I2C_CTL_STO_SI); //发送STOP
0000da  4897              LDR      r0,|L1.824|
0000dc  6800              LDR      r0,[r0,#0]
0000de  f020003c          BIC      r0,r0,#0x3c
0000e2  f0400018          ORR      r0,r0,#0x18
0000e6  4994              LDR      r1,|L1.824|
0000e8  6008              STR      r0,[r1,#0]
;;;98     			endflag = 1;
0000ea  2001              MOVS     r0,#1
0000ec  4997              LDR      r1,|L1.844|
0000ee  7008              STRB     r0,[r1,#0]
                  |L1.240|
;;;99         }
;;;100        else
;;;101        {
;;;102            /* TO DO */
;;;103            //rxstatusis NOT processed
;;;104        }
;;;105    }
0000f0  bd10              POP      {r4,pc}
;;;106    
                          ENDP

                  I2C_MasterTx PROC
;;;109    /*---------------------------------------------------------------------------------------------------------*/
;;;110    void I2C_MasterTx(unsigned int txstatus)
0000f2  b510              PUSH     {r4,lr}
;;;111    {
0000f4  4604              MOV      r4,r0
;;;112        if(txstatus == 0x08)                       /* START has been transmitted */
0000f6  2c08              CMP      r4,#8
0000f8  d10a              BNE      |L1.272|
;;;113        {
;;;114            I2C_SET_DATA(I2C0, VK2C23B_ADDR << 1);    /* Write SLA+W to Register I2CDAT */
0000fa  207c              MOVS     r0,#0x7c
0000fc  498e              LDR      r1,|L1.824|
0000fe  6088              STR      r0,[r1,#8]
;;;115            I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI);
000100  4608              MOV      r0,r1
000102  6800              LDR      r0,[r0,#0]
000104  f020003c          BIC      r0,r0,#0x3c
000108  f0400008          ORR      r0,r0,#8
00010c  6008              STR      r0,[r1,#0]
00010e  e046              B        |L1.414|
                  |L1.272|
;;;116        }
;;;117        else if(txstatus == 0x18)                  /* SLA+W has been transmitted and ACK has been received */
000110  2c18              CMP      r4,#0x18
000112  d111              BNE      |L1.312|
;;;118        {
;;;119            I2C_SET_DATA(I2C0, i2cwrbuf[txcnt++]);
000114  488a              LDR      r0,|L1.832|
000116  7801              LDRB     r1,[r0,#0]  ; txcnt
000118  7800              LDRB     r0,[r0,#0]  ; txcnt
00011a  1c40              ADDS     r0,r0,#1
00011c  4a88              LDR      r2,|L1.832|
00011e  7010              STRB     r0,[r2,#0]
000120  488b              LDR      r0,|L1.848|
000122  5c40              LDRB     r0,[r0,r1]
000124  4984              LDR      r1,|L1.824|
000126  6088              STR      r0,[r1,#8]
;;;120            I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI);
000128  4608              MOV      r0,r1
00012a  6800              LDR      r0,[r0,#0]
00012c  f020003c          BIC      r0,r0,#0x3c
000130  f0400008          ORR      r0,r0,#8
000134  6008              STR      r0,[r1,#0]
000136  e032              B        |L1.414|
                  |L1.312|
;;;121        }
;;;122        else if(txstatus == 0x20)                  /* SLA+W has been transmitted and NACK has been received */
000138  2c20              CMP      r4,#0x20
00013a  d10b              BNE      |L1.340|
;;;123        {
;;;124            I2C_STOP(I2C0);
00013c  487e              LDR      r0,|L1.824|
00013e  f7fffffe          BL       I2C_STOP
;;;125            I2C_START(I2C0);
000142  487d              LDR      r0,|L1.824|
000144  6800              LDR      r0,[r0,#0]
000146  f0200008          BIC      r0,r0,#8
00014a  f0400020          ORR      r0,r0,#0x20
00014e  497a              LDR      r1,|L1.824|
000150  6008              STR      r0,[r1,#0]
000152  e024              B        |L1.414|
                  |L1.340|
;;;126        }
;;;127        else if(txstatus == 0x28)                  /* DATA has been transmitted and ACK has been received */
000154  2c28              CMP      r4,#0x28
000156  d122              BNE      |L1.414|
;;;128        {
;;;129            if(txcnt != txlen)
000158  4879              LDR      r0,|L1.832|
00015a  7800              LDRB     r0,[r0,#0]  ; txcnt
00015c  497d              LDR      r1,|L1.852|
00015e  7809              LDRB     r1,[r1,#0]  ; txlen
000160  4288              CMP      r0,r1
000162  d011              BEQ      |L1.392|
;;;130            {
;;;131                I2C_SET_DATA(I2C0, i2cwrbuf[txcnt++]);
000164  4876              LDR      r0,|L1.832|
000166  7801              LDRB     r1,[r0,#0]  ; txcnt
000168  7800              LDRB     r0,[r0,#0]  ; txcnt
00016a  1c40              ADDS     r0,r0,#1
00016c  4a74              LDR      r2,|L1.832|
00016e  7010              STRB     r0,[r2,#0]
000170  4877              LDR      r0,|L1.848|
000172  5c40              LDRB     r0,[r0,r1]
000174  4970              LDR      r1,|L1.824|
000176  6088              STR      r0,[r1,#8]
;;;132                I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI);
000178  4608              MOV      r0,r1
00017a  6800              LDR      r0,[r0,#0]
00017c  f020003c          BIC      r0,r0,#0x3c
000180  f0400008          ORR      r0,r0,#8
000184  6008              STR      r0,[r1,#0]
000186  e00a              B        |L1.414|
                  |L1.392|
;;;133            }
;;;134            else
;;;135            {
;;;136                I2C_SET_CONTROL_REG(I2C0, I2C_CTL_STO_SI);
000188  486b              LDR      r0,|L1.824|
00018a  6800              LDR      r0,[r0,#0]
00018c  f020003c          BIC      r0,r0,#0x3c
000190  f0400018          ORR      r0,r0,#0x18
000194  4968              LDR      r1,|L1.824|
000196  6008              STR      r0,[r1,#0]
;;;137                endflag = 1;
000198  2001              MOVS     r0,#1
00019a  496c              LDR      r1,|L1.844|
00019c  7008              STRB     r0,[r1,#0]
                  |L1.414|
;;;138            }
;;;139        }
;;;140        else
;;;141        {
;;;142           /* TO DO */
;;;143          //txstatus is NOT processed
;;;144        }
;;;145    }
00019e  bd10              POP      {r4,pc}
;;;146    /*******************************************************************************
                          ENDP

                  VK2C23B_I2C_WRCmd PROC
;;;152    *******************************************************************************/
;;;153    void VK2C23B_I2C_WRCmd(unsigned char Addr,unsigned char Cmd)
0001a0  4a6b              LDR      r2,|L1.848|
;;;154    {
;;;155    	i2cwrbuf[0] = Addr;
0001a2  7010              STRB     r0,[r2,#0]
;;;156    	i2cwrbuf[1] = Cmd;  
0001a4  7051              STRB     r1,[r2,#1]
;;;157    	txcnt = 0;
0001a6  2200              MOVS     r2,#0
0001a8  4b65              LDR      r3,|L1.832|
0001aa  701a              STRB     r2,[r3,#0]
;;;158    	txlen = 2;
0001ac  2202              MOVS     r2,#2
0001ae  4b69              LDR      r3,|L1.852|
0001b0  701a              STRB     r2,[r3,#0]
;;;159    	endflag = 0;
0001b2  2200              MOVS     r2,#0
0001b4  4b65              LDR      r3,|L1.844|
0001b6  701a              STRB     r2,[r3,#0]
;;;160    
;;;161    	/* I2C function to write data to slave */
;;;162    	i2c0handlerflag = (I2C_FUNC)I2C_MasterTx;
0001b8  f2af02c9          ADR      r2,I2C_MasterTx + 1
0001bc  4b5f              LDR      r3,|L1.828|
0001be  601a              STR      r2,[r3,#0]  ; i2c0handlerflag
;;;163    
;;;164    	/* I2C as master sends START signal */
;;;165    	I2C_SET_CONTROL_REG(I2C0, I2C_CTL_STA);
0001c0  4a5d              LDR      r2,|L1.824|
0001c2  6812              LDR      r2,[r2,#0]
0001c4  f022023c          BIC      r2,r2,#0x3c
0001c8  f0420220          ORR      r2,r2,#0x20
0001cc  4b5a              LDR      r3,|L1.824|
0001ce  601a              STR      r2,[r3,#0]
;;;166    	
;;;167    	/* Wait I2C Tx Finish */
;;;168    	while(endflag == 0);
0001d0  bf00              NOP      
                  |L1.466|
0001d2  4a5e              LDR      r2,|L1.844|
0001d4  7812              LDRB     r2,[r2,#0]  ; endflag
0001d6  2a00              CMP      r2,#0
0001d8  d0fb              BEQ      |L1.466|
;;;169    	endflag = 0;
0001da  2200              MOVS     r2,#0
0001dc  4b5b              LDR      r3,|L1.844|
0001de  701a              STRB     r2,[r3,#0]
;;;170    }
0001e0  4770              BX       lr
;;;171    /*******************************************************************************
                          ENDP

                  VK2C23B_I2C_WRDat PROC
;;;177    *******************************************************************************/
;;;178    void VK2C23B_I2C_WRDat(unsigned char Addr,unsigned char *Databuf,unsigned char cnt)
0001e2  b570              PUSH     {r4-r6,lr}
;;;179    {
0001e4  4603              MOV      r3,r0
;;;180    	unsigned char i;  
;;;181      i2cwrbuf[0] = VK2C23B_RWRAM;	
0001e6  2480              MOVS     r4,#0x80
0001e8  4d59              LDR      r5,|L1.848|
0001ea  702c              STRB     r4,[r5,#0]
;;;182    	i2cwrbuf[1] = Addr;
0001ec  462c              MOV      r4,r5
0001ee  7063              STRB     r3,[r4,#1]
;;;183    	for(i=0;i<cnt;i++)
0001f0  2000              MOVS     r0,#0
0001f2  e006              B        |L1.514|
                  |L1.500|
;;;184    	{
;;;185    		i2cwrbuf[2+i] = *Databuf++;  
0001f4  f8115b01          LDRB     r5,[r1],#1
0001f8  1c84              ADDS     r4,r0,#2
0001fa  4e55              LDR      r6,|L1.848|
0001fc  5535              STRB     r5,[r6,r4]
0001fe  1c44              ADDS     r4,r0,#1              ;183
000200  b2e0              UXTB     r0,r4                 ;183
                  |L1.514|
000202  4290              CMP      r0,r2                 ;183
000204  dbf6              BLT      |L1.500|
;;;186    	}
;;;187    	txcnt = 0;
000206  2400              MOVS     r4,#0
000208  4d4d              LDR      r5,|L1.832|
00020a  702c              STRB     r4,[r5,#0]
;;;188    	txlen=cnt+2; 
00020c  1c94              ADDS     r4,r2,#2
00020e  4d51              LDR      r5,|L1.852|
000210  702c              STRB     r4,[r5,#0]
;;;189    	endflag = 0;
000212  2400              MOVS     r4,#0
000214  4d4d              LDR      r5,|L1.844|
000216  702c              STRB     r4,[r5,#0]
;;;190    
;;;191    	/* I2C function to write data to slave */
;;;192    	i2c0handlerflag = (I2C_FUNC)I2C_MasterTx;
000218  f2af1429          ADR      r4,I2C_MasterTx + 1
00021c  4d47              LDR      r5,|L1.828|
00021e  602c              STR      r4,[r5,#0]  ; i2c0handlerflag
;;;193    
;;;194    	/* I2C as master sends START signal */
;;;195    	I2C_SET_CONTROL_REG(I2C0, I2C_CTL_STA);
000220  4c45              LDR      r4,|L1.824|
000222  6824              LDR      r4,[r4,#0]
000224  f024043c          BIC      r4,r4,#0x3c
000228  f0440420          ORR      r4,r4,#0x20
00022c  4d42              LDR      r5,|L1.824|
00022e  602c              STR      r4,[r5,#0]
;;;196    
;;;197    	/* Wait I2C Tx Finish */
;;;198    	while(endflag == 0);
000230  bf00              NOP      
                  |L1.562|
000232  4c46              LDR      r4,|L1.844|
000234  7824              LDRB     r4,[r4,#0]  ; endflag
000236  2c00              CMP      r4,#0
000238  d0fb              BEQ      |L1.562|
;;;199    	endflag = 0;
00023a  2400              MOVS     r4,#0
00023c  4d43              LDR      r5,|L1.844|
00023e  702c              STRB     r4,[r5,#0]
;;;200    }
000240  bd70              POP      {r4-r6,pc}
;;;201    
                          ENDP

                  VK2C23B_I2C_RDDat PROC
;;;208    *******************************************************************************/
;;;209    void VK2C23B_I2C_RDDat(unsigned char Addr,unsigned char *Databuf,unsigned char cnt)
000242  b570              PUSH     {r4-r6,lr}
;;;210    {	
000244  4603              MOV      r3,r0
;;;211    	unsigned char i,rxnum;
;;;212    	
;;;213    	rxnum=cnt;
000246  4614              MOV      r4,r2
;;;214    	for(i=0;i<rxnum;i++)
000248  2000              MOVS     r0,#0
00024a  e02f              B        |L1.684|
                  |L1.588|
;;;215    	{
;;;216    		//I2C发送地址
;;;217    		i2crdtx[0]=VK2C23B_RWRAM; 
00024c  2580              MOVS     r5,#0x80
00024e  4e3d              LDR      r6,|L1.836|
000250  7035              STRB     r5,[r6,#0]
;;;218    		i2crdtx[1]= (Addr&0x1f)+i;
000252  f003051f          AND      r5,r3,#0x1f
000256  4405              ADD      r5,r5,r0
000258  7075              STRB     r5,[r6,#1]
;;;219    		txcnt = 0;
00025a  2500              MOVS     r5,#0
00025c  4e38              LDR      r6,|L1.832|
00025e  7035              STRB     r5,[r6,#0]
;;;220    		txlen=2;
000260  2502              MOVS     r5,#2
000262  4e3c              LDR      r6,|L1.852|
000264  7035              STRB     r5,[r6,#0]
;;;221    		endflag = 0;
000266  2500              MOVS     r5,#0
000268  4e38              LDR      r6,|L1.844|
00026a  7035              STRB     r5,[r6,#0]
;;;222    		//I2C接收数据
;;;223    	/* I2C function to read data from slave */
;;;224    		i2c0handlerflag = (I2C_FUNC)I2C_MasterRx;
00026c  f2af2549          ADR      r5,I2C_MasterRx + 1
000270  4e32              LDR      r6,|L1.828|
000272  6035              STR      r5,[r6,#0]  ; i2c0handlerflag
;;;225    
;;;226    		rxcnt = 0;
000274  2500              MOVS     r5,#0
000276  4e38              LDR      r6,|L1.856|
000278  7035              STRB     r5,[r6,#0]
;;;227    		rxlen=1;
00027a  2501              MOVS     r5,#1
00027c  4e37              LDR      r6,|L1.860|
00027e  7035              STRB     r5,[r6,#0]
;;;228    
;;;229    		I2C_SET_CONTROL_REG(I2C0, I2C_CTL_STA);
000280  4d2d              LDR      r5,|L1.824|
000282  682d              LDR      r5,[r5,#0]
000284  f025053c          BIC      r5,r5,#0x3c
000288  f0450520          ORR      r5,r5,#0x20
00028c  4e2a              LDR      r6,|L1.824|
00028e  6035              STR      r5,[r6,#0]
;;;230    
;;;231    		/* Wait I2C Rx Finish */
;;;232    		while(endflag == 0);
000290  bf00              NOP      
                  |L1.658|
000292  4d2e              LDR      r5,|L1.844|
000294  782d              LDRB     r5,[r5,#0]  ; endflag
000296  2d00              CMP      r5,#0
000298  d0fb              BEQ      |L1.658|
;;;233    		*Databuf++=i2cwrbuf[txlen+i]; //显示数据是低位先读
00029a  4d2e              LDR      r5,|L1.852|
00029c  782d              LDRB     r5,[r5,#0]  ; txlen
00029e  4405              ADD      r5,r5,r0
0002a0  4e2b              LDR      r6,|L1.848|
0002a2  5d75              LDRB     r5,[r6,r5]
0002a4  f8015b01          STRB     r5,[r1],#1
0002a8  1c45              ADDS     r5,r0,#1              ;214
0002aa  b2e8              UXTB     r0,r5                 ;214
                  |L1.684|
0002ac  42a0              CMP      r0,r4                 ;214
0002ae  dbcd              BLT      |L1.588|
;;;234    	}
;;;235    }
0002b0  bd70              POP      {r4-r6,pc}
;;;236    
                          ENDP

                  main PROC
;;;243    *******************************************************************************/
;;;244    int main(void)
0002b2  bf00              NOP      
0002b4  bf00              NOP      
0002b6  bf00              NOP      
                  |L1.696|
0002b8  2059              MOVS     r0,#0x59
0002ba  4929              LDR      r1,|L1.864|
0002bc  6008              STR      r0,[r1,#0]
0002be  2016              MOVS     r0,#0x16
0002c0  0589              LSLS     r1,r1,#22
0002c2  f8c10100          STR      r0,[r1,#0x100]
0002c6  2088              MOVS     r0,#0x88
0002c8  f8c10100          STR      r0,[r1,#0x100]
0002cc  06c0              LSLS     r0,r0,#27
0002ce  f8d00100          LDR      r0,[r0,#0x100]
0002d2  2800              CMP      r0,#0
0002d4  d0f0              BEQ      |L1.696|
0002d6  bf00              NOP      
;;;245    {
;;;246    	/* Unlock protected registers */
;;;247    	SYS_UnlockReg();
;;;248    	SYS_Init();
0002d8  f7fffffe          BL       SYS_Init
;;;249    	/* Lock protected registers */
;;;250    	SYS_LockReg();
0002dc  bf00              NOP      
0002de  2000              MOVS     r0,#0
0002e0  491f              LDR      r1,|L1.864|
0002e2  6008              STR      r0,[r1,#0]
0002e4  bf00              NOP      
;;;251    	
;;;252    	//配置PD5(SCL),PD4(SDA)脚为硬件I2C,频率100khz
;;;253    	/* Open I2C module and set bus clock */
;;;254    	I2C_Open(I2C0, 30000);  //100khz
0002e6  f2475130          MOV      r1,#0x7530
0002ea  4813              LDR      r0,|L1.824|
0002ec  f7fffffe          BL       I2C_Open
;;;255    	/* Set I2C Slave Addresses */
;;;256    	I2C_SetSlaveAddr(I2C0, 0, VK2C23B_ADDR, 0);   
0002f0  2300              MOVS     r3,#0
0002f2  223e              MOVS     r2,#0x3e
0002f4  4619              MOV      r1,r3
0002f6  4810              LDR      r0,|L1.824|
0002f8  f7fffffe          BL       I2C_SetSlaveAddr
;;;257    	/* Enable I2C interrupt */
;;;258    	I2C_EnableInt(I2C0);
0002fc  480e              LDR      r0,|L1.824|
0002fe  f7fffffe          BL       I2C_EnableInt
;;;259    	NVIC_EnableIRQ(I2C0_IRQn);
000302  2026              MOVS     r0,#0x26
000304  f000021f          AND      r2,r0,#0x1f
000308  2101              MOVS     r1,#1
00030a  4091              LSLS     r1,r1,r2
00030c  0942              LSRS     r2,r0,#5
00030e  0092              LSLS     r2,r2,#2
000310  f10222e0          ADD      r2,r2,#0xe000e000
000314  f8c21100          STR      r1,[r2,#0x100]
000318  bf00              NOP      
;;;260    		
;;;261    	VK2C23B_Main();
00031a  f7fffffe          BL       VK2C23B_Main
;;;262    	
;;;263    	while(1)
00031e  bf00              NOP      
                  |L1.800|
000320  e7fe              B        |L1.800|
;;;264    	{					
;;;265    	}
;;;266    }	
;;;267    /************************END OF FILE****/
                          ENDP

                  I2C_STOP PROC
;;;367     */
;;;368    static __INLINE void I2C_STOP(I2C_T *i2c)
000322  6801              LDR      r1,[r0,#0]
;;;369    {
;;;370    
;;;371        (i2c)->CTL |= (I2C_CTL_SI_Msk | I2C_CTL_STO_Msk);
000324  f0410118          ORR      r1,r1,#0x18
000328  6001              STR      r1,[r0,#0]
;;;372        while(i2c->CTL & I2C_CTL_STO_Msk);
00032a  bf00              NOP      
                  |L1.812|
00032c  6801              LDR      r1,[r0,#0]
00032e  f0010110          AND      r1,r1,#0x10
000332  2900              CMP      r1,#0
000334  d1fa              BNE      |L1.812|
;;;373    }
000336  4770              BX       lr
;;;374    
                          ENDP

                  |L1.824|
                          DCD      0x40080000
                  |L1.828|
                          DCD      i2c0handlerflag
                  |L1.832|
                          DCD      txcnt
                  |L1.836|
                          DCD      i2crdtx
                  |L1.840|
                          DCD      i2crdrx
                  |L1.844|
                          DCD      endflag
                  |L1.848|
                          DCD      i2cwrbuf
                  |L1.852|
                          DCD      txlen
                  |L1.856|
                          DCD      rxcnt
                  |L1.860|
                          DCD      rxlen
                  |L1.864|
                          DCD      0x40000100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  i2cwrbuf
                          %        64
                  i2crdtx
                          %        64

                          AREA ||.data||, DATA, ALIGN=2

                  i2c0handlerflag
                          DCD      0x00000000
                  i2crdrx
000004  00                DCB      0x00
                  rxdummy
000005  00                DCB      0x00
                  txlen
000006  00                DCB      0x00
                  txcnt
000007  00                DCB      0x00
                  rxlen
000008  00                DCB      0x00
                  rxcnt
000009  00                DCB      0x00
                  endflag
00000a  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_endflag____REV16|
#line 114 "..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_endflag____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_endflag____REVSH|
#line 128
|__asm___6_main_c_endflag____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
